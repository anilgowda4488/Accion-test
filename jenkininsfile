pipeline {
    agent any

    environment {
        IMAGE_NAME = 'dockerhub-anil/nginx:1.19-alpine'
        IMAGE_TAG = "v${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = 'custom-nginx'
        SONAR_SCANNER_CLI = 'SonarQubeScanner'
        REGISTRY_CREDENTIALS = 'dockerhub-creds-id'
        SONAR_CREDS = 'sonar-creds-id'
        KUBECONFIG_CREDENTIALS = 'kubeconfig-creds-id'
    }

    tools {
        sonarQubeScanner "${SONAR_SCANNER_CLI}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Static Code Scan - SonarQube') {
            steps {
                withSonarQubeEnv('MySonarQube') {
                    withCredentials([string(credentialsId: SONAR_CREDS, variable: 'SONAR_TOKEN')]) {
                        sh """
                        sonar-scanner \
                          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=$SONAR_HOST_URL \
                          -Dsonar.login=$SONAR_TOKEN
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
            }
        }

        stage('Smoke Test') {
            steps {
                sh """
                docker run -d -p 8080:80 --name test-nginx ${IMAGE_NAME}:${IMAGE_TAG}
                sleep 5
                curl -f http://localhost:8080 || (echo 'Health check failed' && exit 1)
                docker stop test-nginx && docker rm test-nginx
                """
            }
        }

        stage('Vulnerability Scan - Trivy') {
            steps {
                sh "trivy image --exit-code 1 --severity CRITICAL ${IMAGE_NAME}:${IMAGE_TAG}"
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                    docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    docker logout
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                expression { fileExists('statefulset.yaml') }
            }
            steps {
                withCredentials([file(credentialsId: KUBECONFIG_CREDENTIALS, variable: 'KUBECONFIG')]) {
                    sh """
                    export KUBECONFIG=$KUBECONFIG
                    sed -i "s|image: .*|image: ${IMAGE_NAME}:${IMAGE_TAG}|" statefulset.yaml
                    kubectl apply -f 
                    """
                }
            }
        }
        stage('Check Deployment Status') {
            steps {
                withCredentials([file(credentialsId: KUBECONFIG_CREDENTIALS, variable: 'KUBECONFIG')]) {
                    sh '''
                        kubectl --kubeconfig=$KUBECONFIG -n app-nginx wait --for=condition=ready pod -l app=custom-nginx --timeout=180s
                    '''
                }
            }
        }   
    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
        failure {
            echo "Pipeline failed. Please check the logs for details."
        }
        success {
            echo "CI/CD pipeline completed successfully!"
        }
    }
}
